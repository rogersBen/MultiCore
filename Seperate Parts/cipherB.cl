__kernel void cipherB(unsigned int size, int key, __global char *text, __global char *encryptedText) {  	int global_id = get_global_id(0); 	int local_id = get_local_id(0); 	int group_id = get_group_id(0);			  	int textCount = global_id - group_id;	/* For additional space added each work-group */  	if (textCount < size) { 		if (local_id == 5){		/* Every 6th character add a space */ 			encryptedText[global_id] = ' '; 		} 		else {  			if ((text[textCount] >= 'a') && (text[textCount] <= 'z')) {		/* If lowercase */ 				text[textCount] = text[textCount] - 32 + key;		/* Apply shift value and shift to uppercase */  				if (text[textCount] > 'Z') {								/* If new character greater than uppercase Z */ 					text[textCount] = text[textCount] - 'Z' + 'A' - 1;		/* Loop around to the beginning of the uppercase letters */ 				} 				else if (text[textCount] < 'A') {							/* If new character less than uppercase A */ 					text[textCount] = text[textCount] - 'A' + 'Z' + 1;		/* Loop around to the end of the uppercase letters */ 				}  				encryptedText[global_id] = text[textCount];					/* Add character to encryptedText buffer */ 			} 			else if ((text[textCount] >= 'A') && (text[textCount] <= 'Z')) {	/* If uppercase */ 				text[textCount] = text[textCount] + key;					/* Apply shift value */  				if (text[textCount] > 'Z') {									/* If new character greater than uppercase Z */ 					text[textCount] = text[textCount] - 'Z' + 'A' - 1;			/* Loop around to the beginning of the uppercase letters */ 				} 				else if (text[textCount] < 'A') {								/* If new character less than uppercase A */ 					text[textCount] = text[textCount] - 'A' + 'Z' + 1;			/* Loop around to the end of the uppercase letters */ 				}  				encryptedText[global_id] = text[textCount];						/* Add character to encryptedText buffer */ 			} 			else {  				encryptedText[global_id] = text[textCount]; 			} 		} 	} }  __kernel void decrypt(unsigned int size, int key, __global char *encryptedText, __global char *decryptedText) {  	int global_id = get_global_id(0);  	if (global_id < size) { 		if ((encryptedText[global_id] >= 'A') && (encryptedText[global_id] <= 'Z')) { 			encryptedText[global_id] = encryptedText[global_id] - key;  			if (encryptedText[global_id] > 'Z') { 				encryptedText[global_id] = encryptedText[global_id] - 'Z' + 'A' - 1; 			} 			else if (encryptedText[global_id] < 'A') { 				encryptedText[global_id] = encryptedText[global_id] - 'A' + 'Z' + 1; 			}  			decryptedText[global_id] = encryptedText[global_id]; 		} 		else { 			decryptedText[global_id] = encryptedText[global_id]; 		} 	} }